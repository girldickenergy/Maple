#pragma once

#include "imgui.h"

class Widgets
{
	static inline const char* const keyNames[] = {
		"None",
		"Mouse 1",
		"Mouse 2",
		"Esc",
		"Mouse 3",
		"Mouse 4",
		"Mouse 5",
		"None",
		"Back",
		"Tab",
		"None",
		"None",
		"Backspace",
		"Enter",
		"None",
		"None",
		"Shift",
		"Ctrl",
		"Alt",
		"Pause Break",
		"Caps Lock",
		"VK_KANA",
		"Unknown",
		"VK_JUNJA",
		"VK_FINAL",
		"VK_KANJI",
		"Unknown",
		"Esc",
		"VK_CONVERT",
		"VK_NONCONVERT",
		"VK_ACCEPT",
		"VK_MODECHANGE",
		"Space",
		"Page Up",
		"Page Down",
		"End",
		"Home",
		"Left",
		"Up",
		"Right",
		"Down",
		"VK_SELECT",
		"VK_PRINT",
		"VK_EXECUTE",
		"Print Screen",
		"Ins",
		"Del",
		"VK_HELP",
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F",
		"G",
		"H",
		"I",
		"J",
		"K",
		"L",
		"M",
		"N",
		"O",
		"P",
		"Q",
		"R",
		"S",
		"T",
		"U",
		"V",
		"W",
		"X",
		"Y",
		"Z",
		"Left Windows",
		"Right Windows",
		"VK_APPS",
		"Unknown",
		"VK_SLEEP",
		"NUMPAD0",
		"NUMPAD1",
		"NUMPAD2",
		"NUMPAD3",
		"NUMPAD4",
		"NUMPAD5",
		"NUMPAD6",
		"NUMPAD7",
		"NUMPAD8",
		"NUMPAD9",
		"Multiply",
		"+",
		"Separator",
		"Subtract",
		"-",
		"/",
		"F1",
		"F2",
		"F3",
		"F4",
		"F5",
		"F6",
		"F7",
		"F8",
		"F9",
		"F10",
		"F11",
		"F12",
		"F13",
		"F14",
		"F15",
		"F16",
		"F17",
		"F18",
		"F19",
		"F20",
		"F21",
		"F22",
		"F23",
		"F24",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Num Lock",
		"Scroll lock",
		"VK_OEM_NEC_EQUAL",
		"VK_OEM_FJ_MASSHOU",
		"VK_OEM_FJ_TOUROKU",
		"VK_OEM_FJ_LOYA",
		"VK_OEM_FJ_ROYA",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Left Shift",
		"Right Shift",
		"Left Ctrl",
		"Right Ctrl",
		"Left Alt",
		"Right Alt",
		"Browser Back",
		"Browser Forward",
		"VK_BROWSER_REFRESH",
		"VK_BROWSER_STOP",
		"VK_BROWSER_SEARCH",
		"VK_BROWSER_FAVORITES",
		"VK_BROWSER_HOME",
		"VK_VOLUME_MUTE",
		"VK_VOLUME_DOWN",
		"VK_VOLUME_UP",
		"VK_MEDIA_NEXT_TRACK",
		"VK_MEDIA_PREV_TRACK",
		"VK_MEDIA_STOP",
		"VK_MEDIA_PLAY_PAUSE",
		"VK_LAUNCH_MAIL",
		"VK_LAUNCH_MEDIA_SELECT",
		"VK_LAUNCH_APP1",
		"VK_LAUNCH_APP2",
		"Unknown",
		"Unknown",
		";:",
		"= +",
		", <",
		"-_",
		".>",
		"/?",
		"` ~ ",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"Unknown",
		"[{",
		"|",
		"}]",
		"Quote",
		"VK_OEM_8",
		"Unknown",
		"Unknown",
		"VK_OEM_102",
		"Unknown",
		"VK_PROCESSKEY",
		"Unknown",
		"VK_PACKET",
		"Unknown",
		"Unknown",
		"VK_ATTN",
		"VK_CRSEL",
		"VK_EXSEL",
		"VK_EREOF",
		"Play",
		"Zoom",
		"Unknown",
		"VK_PA1",
		"Clear"
	};

	static const char* patchFormatStringFloatToInt(const char* fmt);
	static bool items_ArrayGetter(void* data, int idx, const char** out_text);
	static float calcMaxPopupHeightFromItemCount(int items_count);
public:
	static bool Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size_arg = ImVec2(0, 0));
	static bool Tab(const char* label, void* icon, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg);
	static float CalcPanelHeight(int widgetCount, int textCount = 0, int spacingCount = 0);
	static void BeginPanel(const char* label, const ImVec2& size);
	static void EndPanel();
	static bool Checkbox(const char* label, bool* v);
	static bool ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags);
	static bool Button(const char* label, const ImVec2& size_arg = ImVec2(0, 0));
	static bool SmallButton(const char* label);
	static bool Hotkey(const char* label, int* k);
	static bool InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);
	static bool SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format, ImGuiSliderFlags flags);
	static bool SliderInt(const char* label, int* v, int v_min, int v_max, int step = 1, int stepFast = 10, const char* format = "%d", ImGuiSliderFlags flags = 0);
	static bool SliderFloat(const char* label, float* v, float v_min, float v_max, float step = 0.1f, float stepFast = 1.f, const char* format = "%.3f", ImGuiSliderFlags flags = 0);
	static bool BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);
	static bool Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);
	static bool Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
	static void Tooltip(const char* text);
	static void HitErrorBar(int window);
};