#pragma once

#include <cstdint>

#include "CLR/CLRString.h"
#include "Numerics/Vector2.h"

struct PlayerInternal
{
    long scoreChecksumNumerical;
    long unknownPauseThing;
    double jumpCount;
    long dateTimeCheckTimeInitial;
    uintptr_t s_arrows;
    uintptr_t ActiveHitObject;
    uintptr_t visualSettings;
    uintptr_t scrubber;
    CLRString* currentProgressString;
    uintptr_t eventManager;
    uintptr_t hitObjectManager;
    uintptr_t pauseCursor;
    uintptr_t pauseCursorText;
    uintptr_t pauseSprites;
    uintptr_t pauseContinue;
    uintptr_t pauseRetry;
    uintptr_t pauseBack;
    uintptr_t progressBar;
    uintptr_t Ruleset;
    uintptr_t s_breakFail;
    uintptr_t s_breakPass;
    uintptr_t breakStopTimes;
    uintptr_t scoreChecksum;
    uintptr_t scoreEntry;
    uintptr_t skip;
    uintptr_t spectatorList;
    uintptr_t spriteManager;
    uintptr_t spriteManagerAdd;
    uintptr_t spriteManagerBelowHitObjectsWidescreen;
    uintptr_t spriteManagerBelowScoreboardWidescreen;
    uintptr_t spriteManagerMetadata;
    uintptr_t spriteManagerInterface;
    uintptr_t spriteManagerInterfaceWidescreen;
    uintptr_t spriteManagerPauseScreen;
    uintptr_t spriteManagerHighest;
    uintptr_t t_star2;
    uintptr_t inputOverlay;
    uintptr_t showInterfaceToggle;
    uintptr_t Loader;
    uintptr_t session;
    uintptr_t warnings;
    uintptr_t previewAudioTrack;
    uintptr_t pauseScreenLoop;
    uintptr_t OnClick;
    uintptr_t PendingScoreChangeObject;
    uintptr_t pauseArrows;
    uintptr_t loadingSpinner;
    uintptr_t beatmap;
    float bloomBurst;
    int burstSampleNumber;
    int currentUpdateFrame;
    int comboBurstComboLast;
    int LastPause;
    int missPreviousFrame;
    int progressStringLastPosition;
    int resumeAfterBreakTime;
    int scorePreviousFrame;
    int SkipBoundary;
    int CountdownTime;
    int spectatorListUpdate;
    int Status;
    int lastHitTime;
    int firstHitTime;
    int ModeOriginal;
    float previewAudioTrackVolume;
    int lastPlayerOffsetChange;
    int lastPressTime;
    float distanceChange;
    float lastDistance;
    int twoFrameTime;
    int lastTime;
    int lastFrameTime;
    int pauseSelected;
    int audioStartTime;
    int rankType;
    int leadInTime;
    int audioCheckCount;
    int audioCheckTime;
    int audioCheckTimeComp;
    int dateTimeCheckCount;
    int dateTimeCheckTimeComp;
    int flSkippedThisNote;
    int haxCheckCount;
    int lastIpcCheck;
    bool IsNearSpinner;
    bool IsTutorial;
    bool breakAccountedFor;
    bool comboBurstPending;
    bool failedPreviousFrame;
    bool forceReplayFrame;
    bool frameContainsImportantData;
    bool HasSkippedOutro;
    bool OnlineDataPending;
    bool Passed;
    bool ReportedEndGame;
    bool UnpauseConfirmed;
    bool DrainTime;
    bool InitialAllowSubmission;
    bool inputReceivedAtLeastOnce;
    bool replayModeStable;
    bool incrementPlaycount;
    bool loadDelayAdded;
    bool NewSyncBeatWaiting;
    bool failedState;
    bool togglePausePending;
    bool jumpFrame;
    bool circlePresent;
    bool FinishedInitialAudioSetup;
    bool AsyncLoadComplete;
    bool IsAutoplayReplay;
    bool reloadingAfterChange;
    bool flCheckedThisPlay;
    bool allowSubmissionHaxCheck;
    bool haxFound;
    Vector2 mouseVelocity;
    Vector2 mouseVelocityLastPosition;
    Vector2 pauseLocation;
    Vector2 lastHoveredCircle;
    Vector2 mp;
    bool lastMpHasValue;
    uint8_t padding1[3];
    Vector2 lastMp;
    bool twoFramesAgoHasValue;
    uint8_t padding2[3];
    Vector2 twoFramesAgo;
    uint8_t starBreakAdditiveR;
    uint8_t padding3[3];
    uint8_t starBreakAdditiveG;
    uint8_t padding4[3];
    uint8_t starBreakAdditiveB;
    uint8_t padding5[3];
    uint8_t starBreakAdditiveA;
    uint8_t padding6[3];
};
